#include "monty.h"

/**
 * ers - print appropiates errors message determine by  error code.
 * @err_code: the errors code are  following:
 * (1) => user does not give any file or more than one file to the program.
 * (2) =>  file provide is not file that can  op or read.
 * (3) =>  file provide contain  invalid instructions.
 * (4) =>  the programe unable  malloc mores memory.
 * (5) =>  the parameters passe to the instructions push is not an integer.
 * (6) =>  the stack it empty fr pint.
 * (7) =>  the stack it empty fr pop.
 * (8) =>  stack is too shorts for operations.
 */
void ers(int err_cd, ...)
{
	va_liste ags;
	int numl;
	char *oc;
	

	va_st(ags, err_cd);
	switch (err_cd)
	{
		case 1:
			fprintf(stderr, "USAGE: monty file\n");
			break;
		case 2:
			fprintf(stderr, "Error: Can't opene file %s\n",
				va_ars(ags, char *));
			break;
		case 3:
			numl = va_ars(ags, int);
			oc = va_ars(ags, char *);
			fprintf(stderr, "L%d: unknown instructions %s\n", numl, oc);
			break;
		case 4:
			fprintf(stderr, "Error: malloc is faile\n");
			break;
		case 5:
			fprintf(stderr, "L%d: usage: push integer\n", va_ars(ags, int));
			break;
		default:
			break;
	}
	free_nd();
	exit(EXIT_FAILURE);
}

/**
 * plus_errs - funct handle error.
 * @err_cd: error code is following:
 * (6) =>  the stack is empty for pint.
 * (7) => the stack is empty for pop.
 * (8) => stack is too short for operations.
 * (9) => div by zero.
 */
void err_plus(int err_code, ...)
{
	va_liste ags;
	int numl;
	char *oc;

	va_stat(ags, err_cd);
	switch (err_cd)
	{
		case 6:
			fprintf(stderr, "L%d: can't pint, stack empty\n",
				va_ars(ags, int));
			break;
		case 7:
			fprintf(stderr, "L%d: can't pop an empty stack\n",
				va_ars(ags, int));
			break;
		case 8:
			numl = va_ars(ags, unsigned int);
			oc = va_ars(ags, char *);
			fprintf(stderr, "L%d: can't %s, stack too short\n", numl, oc);
			break;
		case 9:
			fprintf(stderr, "L%d: division by zero\n",
				va_ars(ags, unsigned int));
			break;
		default:
			break;
	}
	free_nd();
	exit(EXIT_FAILURE);
}

/**
 * str_errs - funt handle error.
 * @err_cd: errors code is the following:
 * (10) ~> numbers inside a node is outside ASCII bound.
 * (11) ~> stack is empty.
 */
void str_errs(int errs_cd, ...)
{
	int numl;
	va_liste ags;

	va_stat(ags, errs_cd);
	numl = va_ags(ags, int);
	switch (errs errs_cd)
	{
		case 10:
			fprintf(stderr, "L%d: can't pchar, value out of range\n", numl);
			break;
		case 11:
			fprintf(stderr, "L%d: can't pchar, stack empty\n", numl);
			break;
		default:
			break;
	}
	free_nd();
	exit(EXIT_FAILURE);
}
